# Volumes for druid purposes only
volumes:
  metadata_data: {}
  middle_var: {}
  historical_var: {}
  broker_var: {}
  coordinator_var: {}
  router_var: {}
  druid_shared: {}

services:
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:29093"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://0.0.0.0:9092,CONTROLLER://kafka:29093"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CLUSTER_ID: "P45WxmmWSe2CrdGoeJMcKg"
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "kafka-topics --bootstrap-server kafka:29092 --list",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-topic-creator:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic osprey.actions_input --partitions 3 --replication-factor 1 &&
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic osprey.execution_results --partitions 3 --replication-factor 1 &&
        kafka-topics --bootstrap-server kafka:29092 --list
      "

  osprey_worker:
    container_name: osprey_worker
    build:
      context: .
      dockerfile: osprey_worker/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      kafka-topic-creator:
        condition: service_completed_successfully
      bigtable:
        condition: service_healthy
      bigtable_initializer:
        condition: service_completed_successfully
    ports:
      - "5001:5000"
    command: ["osprey-worker"]
    environment:
      - PYTHONPATH=/osprey
      - PORT=5000
      - OSPREY_INPUT_STREAM_SOURCE=kafka
      - OSPREY_STDOUT_OUTPUT_SINK=True
      - OSPREY_KAFKA_BOOTSTRAP_SERVERS=["kafka:29092"]
      - OSPREY_KAFKA_INPUT_STREAM_TOPIC=osprey.actions_input
      # Client ID will default to the machine hostname if it isn't defined
      - OSPREY_KAFKA_INPUT_STREAM_CLIENT_ID=localhost
      - OSPREY_KAFKA_OUTPUT_SINK=True
      - OSPREY_KAFKA_OUTPUT_TOPIC=osprey.execution_results
      - OSPREY_KAFKA_OUTPUT_CLIENT_ID=localhost
      - DD_TRACE_ENABLED=False
      - DD_DOGSTATSD_DISABLE=True
      - OSPREY_RULES_SINK_NUM_WORKERS=1
      - BIGTABLE_EMULATOR_HOST=bigtable:8361
      - SNOWFLAKE_API_ENDPOINT=http://snowflake:8080
    volumes:
      - ./osprey_worker:/osprey/osprey_worker
      - ./osprey_rpc:/osprey/osprey_rpc
      - ./example_rules:/osprey/example_rules

  osprey_ui_api:
    container_name: osprey_ui_api
    build:
      context: .
      dockerfile: osprey_worker/Dockerfile
    depends_on:
      - osprey_worker
      - broker
      - postgres
      - snowflake
      - bigtable
      - bigtable_initializer
    ports:
      - "5004:5004"
    command: ["osprey-ui-api"]
    environment:
      - PYTHONPATH=/osprey
      - PORT=5004
      - DEBUG=true
      - FLASK_DEBUG=1
      - FLASK_ENV=development
      - DRUID_URL=http://broker:8082
      - POSTGRES_HOSTS={"osprey_db":"postgresql://druid:FoolishPassword@postgres:5432/druid"}
      - DD_TRACE_ENABLED=False
      - DD_DOGSTATSD_DISABLE=True
      - OSPREY_RULES_PATH=/osprey/example_rules
      - OSPREY_DISABLE_VALIDATION_EXPORTER=true
      - BIGTABLE_EMULATOR_HOST=bigtable:8361
      - SNOWFLAKE_API_ENDPOINT=http://snowflake:8080
      - SNOWFLAKE_EPOCH=1420070400000
    volumes:
      - ./osprey_worker:/osprey/osprey_worker
      - ./osprey_rpc:/osprey/osprey_rpc
      - ./example_rules:/osprey/example_rules

  osprey_ui:
    container_name: osprey_ui
    build:
      context: .
      dockerfile: osprey_ui/Dockerfile
    depends_on:
      - osprey_ui_api
    ports:
      - "5002:5002"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://osprey_ui_api:5004
    volumes:
      - ./osprey_ui:/app
      - /app/node_modules

  snowflake:
    container_name: snowflake_id_worker
    image: ghcr.io/ayubun/snowflake-id-worker:0
    ports:
      - "8080:8080"
    environment:
      - WORKER_ID=0
      - DATA_CENTER_ID=0
      - EPOCH=1420070400000
    restart: unless-stopped

  bigtable:
    container_name: bigtable_emulator
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
    ports:
      - "8361:8361"
    command: >
      bash -c "
        gcloud beta emulators bigtable start --host-port=0.0.0.0:8361 --project=osprey-dev
      "
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "pgrep -f cbtemulator > /dev/null || exit 1"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  bigtable_initializer:
    container_name: bigtable_initializer
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
    depends_on:
      bigtable:
        condition: service_healthy
    volumes:
      - ./init-bigtable.sh:/init-bigtable.sh
    command: ["/bin/bash", "/init-bigtable.sh"]

  # Optional test data generator - run with:
  # docker compose --profile test_data up kafka_test_data_producer -d
  kafka_test_data_producer:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka_test_data
    depends_on:
      kafka:
        condition: service_healthy
      kafka-topic-creator:
        condition: service_completed_successfully
    profiles:
      - test_data
    environment:
      KAFKA_TOPIC: "osprey.actions_input"
      KAFKA_BROKER: "kafka:29092"
    volumes:
      - ./example_data:/osprey/example_data
    entrypoint:
      - /bin/bash
    command: ["/osprey/example_data/generate_test_data.sh"]

  # DRUID, HERE BE DRAGONS
  postgres:
    container_name: postgres
    image: postgres:latest
    ports:
      - "5432:5432"
    volumes:
      - metadata_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=FoolishPassword
      - POSTGRES_USER=druid
      - POSTGRES_DB=druid

  # Need 3.5 or later for container nodes
  zookeeper:
    container_name: zookeeper
    image: zookeeper:3.5.10
    ports:
      - "2181:2181"
    environment:
      - ZOO_MY_ID=1

  coordinator:
    image: apache/druid:34.0.0
    container_name: coordinator
    volumes:
      - druid_shared:/opt/shared
      - coordinator_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
    ports:
      - "8081:8081"
    command:
      - coordinator
    env_file:
      - druid/environment

  broker:
    image: apache/druid:34.0.0
    container_name: broker
    volumes:
      - broker_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8082:8082"
    command:
      - broker
    env_file:
      - druid/environment

  historical:
    image: apache/druid:34.0.0
    container_name: historical
    volumes:
      - druid_shared:/opt/shared
      - historical_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8083:8083"
    command:
      - historical
    env_file:
      - druid/environment

  middlemanager:
    image: apache/druid:34.0.0
    container_name: middlemanager
    volumes:
      - druid_shared:/opt/shared
      - middle_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8091:8091"
      - "8100-8105:8100-8105"
    command:
      - middleManager
    env_file:
      - druid/environment

  router:
    image: apache/druid:34.0.0
    container_name: router
    volumes:
      - router_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8888:8888"
    command:
      - router
    env_file:
      - druid/environment

  spec-submitter:
    image: curlimages/curl:latest
    depends_on:
      - coordinator
    volumes:
      - ./druid/specs:/specs
    command: ["/bin/sh", "/specs/submit-specs.sh"]
    restart: "no"
